#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = "Alex Stewart"
__copyright__ = "Copyright 2023"
__credits__ = ["Alex Stewart"]
__license__ = "GPL3"
__maintainer__ = "Alex Stewart"

import argparse
from pathlib import Path
from sklearn.cluster import KMeans
from sklearn.utils import shuffle
from skimage import io, color
import numpy as np
from PIL import Image
import random
from pprint import pprint
import copy
import os

# GLOBAL VALUES AND DEFAULTS #
MARKER_SIZE = 11
COLOR_NAME_LEN = 5
WHITE_CUTOFF = 60
AREA_WARNING = 22801  # 151 x 151
AREA_ABORT = 251001  # 501 x 501
ALPHA_CUTOFF = 150
NUMBERS_ORDER = {"0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, "A": 10, "B": 11,
				 "C": 12, "E": 13, "L": 14, "N": 15, "R": 16, "U": 17, "blank": 18, "sep": 19}
PROG_LOCATION = Path(__file__).absolute().parent

parser = argparse.ArgumentParser(description="Program: png2dmc\n"
											 "Version: 1.1\n",
								 formatter_class=argparse.RawDescriptionHelpFormatter,
								 usage='%(prog)s <image_png> <shortest_side> <color_reduce> [options]')
parser.add_argument("image_png", help='The image to be converted into a cross-stitch pattern', type=str)
parser.add_argument("shortest_side", type=int,
					help="The shortest side of the scaled image in pixels. (5 to any integer, -1 for no rescaling)")
parser.add_argument("color_reduce", type=int,
					help="The target number of colors in the final pattern (3 to any integer, -1 for no reduction).")
parser.add_argument("--dmc_idx", help='A list of all the DMC thread colors and their RGB values',
					type=str, default="%s/utils/DMC_index.txt" % PROG_LOCATION, metavar="<file_path>")
parser.add_argument("--marker_file", help='A file containing pixelated markers for making the pattern guide',
					type=str, default="%s/utils/marker_symbols_noborder.png" % PROG_LOCATION, metavar="<file_path>")
parser.add_argument("--numbers_file", help='A file containing pixelated numbers for making the pattern key',
					type=str, default="%s/utils/numbers_w_bg.png" % PROG_LOCATION, metavar="<file_path>")
parser.add_argument("--key_sort", help='Changes how the key is sorted (either by floss number or stitch count)',
					nargs='?', choices={"floss", "count"}, metavar="floss, count", default="floss", type=str)
parser.add_argument("--ignore_size_limit", action='store_true',
					help="bypasses the size limit and forces the program to process large images")
parser.add_argument("--no_reuse", action='store_true',
					help="Disables the program reusing markers and terminates the program if there are more colors"
						 " than markers")
# parser.add_argument("--min_stitch", type=int, default=0,
# 					help="minimum number of stitches before it is merged with the closest color")
parser.add_argument("--random_seed", action='store_true',
					help="Instead of using the file name as a seed, use a random seed")
parser.add_argument("--random_quantize", help="uses the old method to quantize colors (not K-means)",
					action='store_true')
parser.add_argument("--force", help="allows the program to overwrite files", action='store_true')
args = parser.parse_args()

if args.color_reduce != -1 and args.color_reduce <= 2:
	parser.error("<color_reduce> must be either -1 or greater than 2!")
if args.shortest_side != -1 and args.shortest_side < 5:
	parser.error("<shortest_side> must be either -1 or greater than 5!")

filename_stem = "%s_DMC" % Path(args.image_png).resolve().with_suffix("")
# seed the random number generator so that the same named image file will generate the key in the same order
if args.random_seed:
	random.seed()
else:
	random.seed(a=str(Path(filename_stem).name))

if True in [Path(filename_stem).name in i for i in os.listdir(str(Path(filename_stem).parent))] and not args.force:
	print("\nWARNING: there are files in the output directory that could potentially be overwritten!")
	print("Currently, the program will refuse to overwrite these files.")


def overwrite_check():
	generated_files = ["%s.png" % filename_stem, "%s_large.png" % filename_stem, "%s_markers.png" % filename_stem,
					   "%s_key_floss.png" % filename_stem, "%s_key_count.png" % filename_stem,
					   "%s_colors.txt" % filename_stem]
	if True in [Path(x).exists() for x in generated_files]:
		print("\nWARNING: a file that will be generated by the program already exists!")
		print("Please delete it or use the \'--force\' flag to allow the program to overwrite it.")
		exit()


# DMC list generated from the color values provided at
# https://lordlibidan.com/dmc-thread-inventory-spreadsheet/
def parse_dmc_list(dmc_txt):
	color_vals = []
	with open(dmc_txt, "r") as f:
		while True:
			# reads line-by-line to reduce memory load
			line = f.readline()
			if not line:
				break
			# because these should just be one sample per line
			line = line.rstrip().split("\t")
			color_vals.append(line)
	color_dict = {"%s_%s_%s" % (i[2], i[3], i[4]): i[0] for i in color_vals}
	return color_vals, color_dict


# color is a three element list [R, G, B]
# DMC_array is a list of all the DMC colors [[R,G,B], [R,G,B], ..., [R,G,B]]
# from https://stackoverflow.com/questions/54242194/python-find-the-closest-color-to-a-color-from-giving-list-of-colors
def closest_color(dmc_array, search_color):
	ref_colors = np.array(dmc_array)
	search_val = np.array(search_color)
	distances = np.sqrt(np.sum((ref_colors - search_color) ** 2, axis=1))
	index_of_smallest = np.where(distances == np.amin(distances))
	smallest_distance = ref_colors[index_of_smallest]
	return smallest_distance


def import_png(img_file):
	# image is going to be in indexed color mode if we reduced the colors in PS
	focal_img = Image.open(img_file)

	# change from index mode to rgba, (A is alpha, 0=transparent, 255=opaque)
	focal_img = focal_img.convert("RGBA")

	# transforms the PIL object into an array of pixel values
	pattern_pixels = np.array(focal_img)

	return pattern_pixels


def import_pattern(img_file):
	# image is going to be in indexed color mode if we reduced the colors in PS
	focal_img = Image.open(img_file)

	# change from index mode to rgba, (A is alpha, 0=transparent, 255=opaque)
	focal_img = focal_img.convert("RGBA")

	# transforms the PIL object into an array of pixel values
	pattern_pixels = np.array(focal_img)

	# if the image is larger than would be relatively feasible to stitch, abort
	if args.shortest_side == -1:
		scaled_area = focal_img.size[0] * focal_img.size[1]
	else:
		shrink_ratio = args.shortest_side / min(focal_img.size)
		scaled_area = (focal_img.size[0] * shrink_ratio) * (focal_img.size[1] * shrink_ratio)
	if AREA_WARNING <= scaled_area < AREA_ABORT:
		print("WARNING: your pattern will be rather large and might be unfeasible to stitch!")
	if scaled_area >= AREA_ABORT and not args.ignore_size_limit:
		print("\nFATAL: your image would be too large to be reasonably processed by the program.")
		print("Either shrink it by using a smaller \'shortest_side\' or use the \'--ignore_size_limit\' flag!")
		exit()
	pattern_pixels = shrink_and_colorreduce(pattern_pixels)

	return pattern_pixels


def find_and_blot_transparent_pixels(img_array):
	transparents = set()
	for row in range(0, len(img_array)):
		for col in range(0, len(img_array[row])):
			# if a pixel is MOSTLY transparent, cast it as transparent
			if img_array[row][col][3] < ALPHA_CUTOFF:
				transparents.add(f"{row}_{col}")

				# removes the color that might be preset in the transparent pixel
				img_array[row][col][0] = 0
				img_array[row][col][1] = 0
				img_array[row][col][2] = 0
				img_array[row][col][3] = 0

	return transparents


# uses k-means to reduce the colors present in an image and also converts the image to LAB color space
# Inspired heavily by https://github.com/swirlyclouds/EmbroideryPatternScript and
# https://scikit-learn.org/stable/auto_examples/cluster/plot_color_quantization.html
#
# Author and License from swirlyclouds EmbroideryPatternScript
# Author: Swirly Clouds
#
# License: MIT License
#
# Authors and License from the scikit tutorial:
# Authors: Robert Layton <robertlayton@gmail.com>
#          Olivier Grisel <olivier.grisel@ensta.org>
#          Mathieu Blondel <mathieu@mblondel.org>
#
# License: BSD 3 clause
def kmeans_import(img_file):
	global filename_stem
	# load image and convert to LAB space
	pattern_image = io.imread(img_file)

	if len(pattern_image[0][0]) == 4:
		has_transparency = True
	else:
		has_transparency = False

	if has_transparency:
		t_pix = find_and_blot_transparent_pixels(pattern_image)
		# TODO: make an option to change the background color that transparent images are blended with
		pattern_image = color.rgba2rgb(pattern_image, background=[0, 0, 0])
	else:
		t_pix = set()

	pattern_image = color.rgb2lab(pattern_image)
	orig_dims = pattern_image.shape[:2]

	# Transform LAB space image to 2D numpy array
	print("Flattening image...")
	pattern_image = pattern_image.reshape(orig_dims[0] * orig_dims[1], 3)

	# fit the KMeans model to a subset of the data
	k_val = args.color_reduce
	if k_val == -1:
		# k_val = 256
		k_val = 500

	filename_stem = "%s_kmeansCR%s" % (filename_stem, k_val)

	if pattern_image.shape[0] < 10000:
		sample_val = pattern_image.shape[0]
	else:
		sample_val = 10000

	image_subset = shuffle(pattern_image, random_state=0, n_samples=sample_val)

	print("Fitting K-means model on a subset of the image...")
	kmeans_assign = KMeans(n_clusters=k_val, n_init=20, random_state=0)
	kmeans_assign.fit(image_subset)

	print("Predicting the rest of the image with the model...")
	km_whole_image = kmeans_assign.predict(pattern_image)

	pattern_image = kmeans_assign.cluster_centers_[km_whole_image].reshape(orig_dims[0], orig_dims[1], -1)
	pattern_image = color.lab2rgb(pattern_image)

	pattern_image = np.ndarray.tolist(pattern_image)
	for row in range(0, len(pattern_image)):
		for col in range(0, len(pattern_image[row])):
			pattern_image[row][col][0] = int(round(pattern_image[row][col][0] * 255.0))
			pattern_image[row][col][1] = int(round(pattern_image[row][col][1] * 255.0))
			pattern_image[row][col][2] = int(round(pattern_image[row][col][2] * 255.0))

			if f'{row}_{col}' in t_pix:
				pattern_image[row][col].append(0)
			else:
				pattern_image[row][col].append(255)
			np.array(pattern_image[row][col])
		np.array(pattern_image[row])
	pattern_image = np.array(pattern_image).astype(np.uint8)

	# if the image isn't supposed to be scaled, shrink ratio is 1
	if args.shortest_side == -1:
		shrink_ratio = 1
	else:
		shrink_ratio = args.shortest_side / min(orig_dims)
	# rescale the image, even up!
	resized_image = np.array(Image.fromarray(pattern_image).resize(
		(int(orig_dims[1] * shrink_ratio), int(orig_dims[0] * shrink_ratio)), Image.Resampling.NEAREST))

	return resized_image


def match_pix_to_dmc(pixel_array, dmc_int_list, dmc_dic, floss_to_rgb):
	dmc_colors_needed = {}
	for height in range(0, len(pixel_array)):
		for length in range(0, len(pixel_array[height])):
			if pixel_array[height, length, 3] < ALPHA_CUTOFF:
				pixel_array[height, length, 3] = 0
			else:
				pixel_array[height, length, 3] = 255
				curr_dmc_closest = closest_color(dmc_int_list, pixel_array[height, length][:-1])[0]
				pixel_array[height][length][0] = curr_dmc_closest[0]
				pixel_array[height][length][1] = curr_dmc_closest[1]
				pixel_array[height][length][2] = curr_dmc_closest[2]
				try:
					dmc_colors_needed[dmc_dic["_".join(str(i) for i in curr_dmc_closest)]] += 1
				except KeyError:
					dmc_colors_needed.setdefault(dmc_dic["_".join(str(i) for i in curr_dmc_closest)], 1)

	stitch_count_dict = dmc_colors_needed
	# merge low-count colors
	# TODO: finish this
	#low_count_colors = [floss_to_rgb[i] for i in dmc_colors_needed.keys() if dmc_colors_needed[i] <= args.min_stitch]
	#high_count_colors = [floss_to_rgb[i] for i in dmc_colors_needed.keys() if dmc_colors_needed[i] > args.min_stitch]
	#for low_ct in low_count_colors:
		#print(dmc_dic["_".join(str(i) for i in low_ct)])
		#print(dmc_dic["_".join(str(i) for i in closest_color(high_count_colors, low_ct)[0])])
	#	pass

	dmc_colors_needed = list(dmc_colors_needed.keys())
	for i in range(0, len(dmc_colors_needed)):
		try:
			dmc_colors_needed[i] = int(dmc_colors_needed[i])
		except ValueError:
			pass
	dmc_colors_needed.sort(key=lambda i: (isinstance(i, str), i))



	return dmc_colors_needed, stitch_count_dict


# exports the picture but matched to DMC compatible colors
def export_dmc_matched(mod_pix_array):
	remade_img = Image.fromarray(mod_pix_array, mode="RGBA")

	remade_img.save("%s.png" % filename_stem)
	return remade_img


# parse the marker PNG file to make a pattern guide
def parse_markers(marker_file):
	final_markers = []
	marker_array = import_png(marker_file)

	# check if the array is the right shape
	if marker_array.shape[0] % 11 != 0 or marker_array.shape[1] % 11 != 0:
		print("\nFATAL: The marker array is not composed of 11x11 pixel squares!")
		print("Exiting...")
		exit()

	# get the width of the array and split it accordingly
	marker_width = int(marker_array.shape[1] / 11)
	marker_height = int(marker_array.shape[0] / 11)
	marker_array = np.hsplit(marker_array, marker_width)

	for i in marker_array:
		temp_marker = []
		for j in range(0, len(i)):
			temp_marker.append(i[j].tolist())
			if (j + 1) % 11 == 0:
				final_markers.append(temp_marker)
				temp_marker = []

	for i in range(0, len(final_markers)):
		final_markers[i] = np.array(final_markers[i]).astype(np.uint8)

	"""
	for i in range(0, len(final_markers)):
		test_marker = Image.fromarray(np.array(final_markers[i]).astype(np.uint8), mode="RGBA")
		test_marker.save("testmarker%s.png"%i, "PNG")
	"""
	return final_markers, int((marker_height * marker_width) - 1)


# Scale factor (n) means each pixel becomes an NxN square
def scale_up_array(img_array, sf):
	scaled_up_list = []
	for line in img_array:
		extended_line = []
		for ele in line:
			extended_line.extend([list(ele)] * sf)

		extended_line = np.array(extended_line).astype(np.uint8)
		extended_line = np.concatenate([[extended_line]] * sf, axis=0)
		scaled_up_list.append(extended_line)
	scaled_image = np.vstack(scaled_up_list)
	return scaled_image


# constructs the key for the generated pattern
def make_key(marker_dictionary, dmc_color_to_rgb, stitch_count_dict, sort_type):
	numbers = import_png(args.numbers_file)
	numbers = np.hsplit(numbers, len(NUMBERS_ORDER))

	max_stitch_len = max([len(str(count)) for count in stitch_count_dict.values()])
	max_name_len = max([len(str(count)) for count in stitch_count_dict.keys()])

	final_key = []

	key_markers = copy.deepcopy(marker_dictionary)
	del key_markers["empty"]

	if sort_type == "floss":
		keyorder = list(key_markers.keys())
	elif sort_type == "count":
		keyorder = list(sorted(stitch_count_dict, key=lambda k: stitch_count_dict[k]))
	else:
		keyorder = []
		print("what")
		exit()

	for used_color in keyorder:
		active_rgb = dmc_color_to_rgb[used_color]
		for line in key_markers[used_color]:
			for ele in line:
				# make the transparent portion of the marker block the designated color
				if ele[3] == 0:
					ele[0] = active_rgb[0]
					ele[1] = active_rgb[1]
					ele[2] = active_rgb[2]
					ele[3] = 255
		current_key_line = [key_markers[used_color]]
		pos = 0
		# put the name of the color next to the marker
		while pos < len(str(used_color)):
			current_key_line.append(numbers[NUMBERS_ORDER[used_color[pos]]])
			pos += 1
		# if the name of the color is shorter than the max (5), extend it to make the image even
		while pos < max_name_len:
			current_key_line.append(numbers[NUMBERS_ORDER["blank"]])
			pos += 1

		# add a separator block
		current_key_line.append(numbers[NUMBERS_ORDER["sep"]])

		# add the stitch count to the key
		pos = 0
		current_count = str(stitch_count_dict[used_color])

		while pos < len(current_count):
			current_key_line.append(numbers[NUMBERS_ORDER[current_count[pos]]])
			pos += 1
		while pos < max_stitch_len:
			current_key_line.append(numbers[NUMBERS_ORDER["blank"]])
			pos += 1

		final_key.append(np.column_stack(current_key_line))
	final_key = np.row_stack(final_key)
	final_key = scale_up_array(final_key, 20)
	final_key = Image.fromarray(final_key, mode="RGBA")

	return final_key


# shrinks and reduces the color palettes of large images
def shrink_and_colorreduce(np_pixel_array):
	global filename_stem
	# get the shape of the image
	img_dimensions = np_pixel_array.shape[:2]
	# get the number of colors that the image will be reduced to
	num_colors = args.color_reduce

	# if the image isn't supposed to be scaled, shrink ratio is 1
	if args.shortest_side == -1:
		shrink_ratio = 1
	else:
		shrink_ratio = args.shortest_side / min(img_dimensions)

	# rescale the image, even up!
	resized_image = Image.fromarray(np_pixel_array).resize(
		(int(img_dimensions[1] * shrink_ratio), int(img_dimensions[0] * shrink_ratio)), Image.Resampling.NEAREST)

	# recolor the image, if needed
	if num_colors != -1:
		color_reduced = np.array(
			resized_image.convert("P", palette=Image.Palette.ADAPTIVE, colors=num_colors).convert("RGBA"))
		# update the file name
		filename_stem = "%s_CR%s" % (filename_stem, num_colors)
	else:
		color_reduced = np.array(resized_image)

	return color_reduced


if __name__ == '__main__':

	pattern_markers, marker_count = parse_markers(args.marker_file)
	marker_dict = {"empty": pattern_markers[0]}

	dmc_list, dmc_dict = parse_dmc_list(args.dmc_idx)

	dmc_header = dmc_list.pop(0)
	dmc_num_to_name = {v[0]: v[1] for v in dmc_list}
	dmc_num_to_rgb = {v[0]: [int(v[2]), int(v[3]), int(v[4])] for v in dmc_list}
	dmc_ints = [[int(v[2]), int(v[3]), int(v[4])] for v in dmc_list]

	if args.random_quantize:
		pattern_img = import_pattern(args.image_png)
	else:
		pattern_img = kmeans_import(args.image_png)

	# check to make sure the program isn't overwriting any files before executing unless --force has been given
	if not args.force:
		overwrite_check()

	dmc_needed, stitch_count = match_pix_to_dmc(pattern_img, dmc_ints, dmc_dict, dmc_num_to_rgb)

	if len(dmc_needed) > marker_count and not args.no_reuse:
		print("\nWARNING: %s colors are needed and there are %s markers!" % (len(dmc_needed), marker_count))
		print("Reusing markers to make up the difference! To disable this behavior, use the \'--no_reuse\' flag")
	elif len(dmc_needed) < marker_count:
		pass
	else:
		print("\nFATAL: %s colors are needed and there are %s markers!" % (len(dmc_needed), marker_count))
		print("Add more markers or remove the \'--no_reuse\' flag!")
		print("Exiting...")
		exit()

	# scale up the pixels so that markers can fit inside them
	larger_pattern_img = scale_up_array(pattern_img, MARKER_SIZE)
	larger_pattern_img = Image.fromarray(larger_pattern_img, mode="RGBA")

	#####
	# everything below is generating the pattern markers
	#####
	# if we run out of markers for the number of colors requested, resamples the available markers
	random_markers = []
	markers_available = list(range(1, marker_count+1))
	random.shuffle(markers_available)
	while len(random_markers) < len(dmc_needed):
		# pop out values as long as they're there
		if len(markers_available) > 0:
			curr_rand = markers_available.pop(0)
		# once there are no values left, regenerate the available markers
		else:
			markers_available = list(range(1, marker_count + 1))
			random.shuffle(markers_available)
			curr_rand = markers_available.pop(0)
		random_markers.append(curr_rand)

	"""try:
		random_markers = secrets.SystemRandom().sample(range(1, marker_count+1), len(dmc_needed))
	except ValueError:
		print("Not enough markers for all %s necessary colors! " % len(dmc_needed))
		exit()"""

	for v in range(0, len(dmc_needed)):
		# turn the marker white if we need to, with help from
		# https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color
		if ((dmc_num_to_rgb[str(dmc_needed[v])][0] * 0.299) + (dmc_num_to_rgb[str(dmc_needed[v])][1] * 0.587) +
			(dmc_num_to_rgb[str(dmc_needed[v])][2] * 0.114)) < WHITE_CUTOFF:
			turn_white = True
		else:
			turn_white = False
		# turns all the opaque squares of the marker pattern white
		if turn_white:
			for h in pattern_markers[random_markers[v]]:
				for j in h:
					if j[3] == 255:
						j[0] = 255
						j[1] = 255
						j[2] = 255
		# turns all the opaque squares of the marker pattern black
		elif not turn_white:
			for h in pattern_markers[random_markers[v]]:
				for j in h:
					if j[3] == 255:
						j[0] = 0
						j[1] = 0
						j[2] = 0
		# have to copy the dictionary value so that when it is changed later it isn't also changed in the marker dict
		marker_dict[str(dmc_needed[v])] = pattern_markers[random_markers[v]].copy()

	named_dmc_needed = [dmc_num_to_name[str(v)] for v in dmc_needed]

	marker_translate_img = []
	for i in pattern_img:
		temp_marker = []
		for j in i:
			if j[3] == 0:
				temp_marker.append(marker_dict["empty"])
			else:
				temp_marker.append(marker_dict[dmc_dict["%s_%s_%s" % (j[0], j[1], j[2])]])
		marker_translate_img.append(np.column_stack(temp_marker))
	marker_translate_img = np.vstack(marker_translate_img)
	marker_translate_img = Image.fromarray(marker_translate_img, mode="RGBA")

	pattern_img = Image.fromarray(pattern_img, mode="RGBA")

	# combines the markers with the larger pattern so that this image can be used as a guide for stitching
	pattern_w_markers = Image.alpha_composite(larger_pattern_img, marker_translate_img)

	# constructs a key for the guide created above
	key_png_floss = make_key(marker_dict, dmc_num_to_rgb, stitch_count, "floss")
	key_png_count = make_key(marker_dict, dmc_num_to_rgb, stitch_count, "count")

	organized_threads = [[stitch_count[str(v)], v, dmc_num_to_name[str(v)]] for v in dmc_needed]
	if args.key_sort == "count":
		organized_threads = sorted(organized_threads, key=lambda x: x[0])

	with open("%s_colors.txt" % filename_stem, 'w') as f:
		f.write("Count\tFloss #\tName\n")
		for v in organized_threads:
			f.write("%s\t%s\t%s\n" % (v[0], v[1], v[2]))

	print("\n%s colors needed! Here they are: " % len(organized_threads))
	print("# of Stitches\t\tFloss #\t\tName")
	for i in organized_threads:
		print("%s\t\t\t%s\t\t%s" % (i[0], i[1], i[2]))

	pattern_img.save("%s.png" % filename_stem)
	larger_pattern_img.save("%s_large.png" % filename_stem)
	pattern_w_markers.save("%s_markers.png" % filename_stem)
	key_png_floss.save("%s_key_floss.png" % filename_stem)
	key_png_count.save("%s_key_count.png" % filename_stem)

